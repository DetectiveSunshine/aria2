name: Cross-Compile Aria2 for Windows x64 on Linux

on:
  push:
    branches:
      - main # Or your default branch, e.g., master
  pull_request:
    branches:
      - main # Or your default branch
  workflow_dispatch: # Allows running the workflow manually

jobs:
  cross-compile-windows-x64:
    runs-on: ubuntu-latest # Use the latest Ubuntu Linux runner for cross-compilation

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Checkout the latest source code

    - name: Install Cross-Compilation Dependencies
      run: |
        sudo apt-get update
        # Install build tools and the mingw-w64 cross-compilation toolchain for x86_64
        sudo apt-get install -y \
          git \
          make \
          autoconf \
          automake \
          libtool \
          pkg-config \
          gcc-x86-64-w64-mingw32 \
          g++-x86-64-w64-mingw32 \
          zlib1g-dev \
          libssl-dev \
          libc-ares-dev \
          libssh2-1-dev \
          libxml2-dev \
          libsqlite3-dev \
          # Install mingw-w64 development libraries for the dependencies
          mingw-w64-x86-64-dev \
          mingw-w64-tools

    - name: Autoreconf
      run: |
        autoreconf -i

    - name: Configure and Build (Cross-Compile)
      run: |
        # Set environment variables for optimization and debug flags
        # -O3: High level of optimization
        # -flto: Enable Link-Time Optimization (FullLTO)
        # -g0: Do not generate debug information
        # --disable-debug: Standard configure option to disable debug features
        export CFLAGS="-O3 -flto -g0"
        export CXXFLAGS="-O3 -flto -g0"
        export LDFLAGS="-flto"

        # Configure for cross-compilation to x86_64-w64-mingw32
        ./configure \
          --host=x86_64-w64-mingw32 \
          --build=$(uname -m)-linux-gnu \
          --prefix=/usr/local \
          --enable-static=no \
          --enable-shared=yes \
          --with-openssl \
          --with-zlib \
          --with-libxml2 \
          --with-sqlite3 \
          --with-libssh2 \
          --disable-debug \
          --disable-nls # Disable Native Language Support if not needed

        # Build using multiple cores
        make -j$(nproc)

    - name: Install (Cross-Compile)
      run: |
        # Install to a temporary directory to easily package the artifact
        make install DESTDIR=$(pwd)/aria2_win64_build

    - name: Archive Windows Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: aria2-win64-cross-compiled
        # Path to the compiled executable within the temporary install directory
        path: aria2_win64_build/usr/local/bin/aria2c.exe
        retention-days: 7 # How long to keep the artifact

